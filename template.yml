AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  Generator: mcarsala@amazon.com
Description: 'Video Super-Resolution powered by the IntelÂ® Library for Video Super Resolution'
Resources:
  

  inputS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: !Join 
            - '-'
            - - vsr-input
              - !Ref AWS::AccountId
              - !Ref AWS::Region
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId    
          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: true
          OwnershipControls: 
              Rules: 
                - 
                  ObjectOwnership: "BucketOwnerEnforced"
          PublicAccessBlockConfiguration: 
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true

  outputS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName:

          BucketName: !Join 
            - '-'
            - - vsr-output
              - !Ref AWS::AccountId
              - !Ref AWS::Region
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId         

          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: true
          OwnershipControls: 
              Rules: 
                - 
                  ObjectOwnership: "BucketOwnerEnforced"
          PublicAccessBlockConfiguration: 
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true

  EC2SecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: "VSR ECS security group"
          GroupName: !Join 
            - '-'
            - - vsr-securityGroup
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId    

          VpcId: !Ref VPCName

          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 22
              IpProtocol: "tcp"
              ToPort: 22
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join 
            - '-'
            - - ec2BatchRole
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId    

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !Join
                    - '' 
                    - - 'arn:aws:s3:::'
                      - !Ref inputS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::' 
                      - !Ref inputS3Bucket
                      - '/*'
                  - !Join
                    - '' 
                    - - 'arn:aws:s3:::'
                      - !Ref outputS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::' 
                      - !Ref outputS3Bucket
                      - '/*'                     
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join 
            - '-'
            - - ec2BatchProfile
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId     

      Path: /
      Roles:
        - !Ref RootRole


  ecsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Join 
            - '-'
            - - ecsTaskExecutionRole
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId     

      AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 36000
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !Join
                    - '' 
                    - - 'arn:aws:s3:::'
                      - !Ref inputS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::' 
                      - !Ref inputS3Bucket
                      - '/*'
                  - !Join
                    - '' 
                    - - 'arn:aws:s3:::'
                      - !Ref outputS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::' 
                      - !Ref outputS3Bucket
                      - '/*'        
    DependsOn: [inputS3Bucket, outputS3Bucket]                    
  BatchVSRComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: VideoSuperResolution
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 256
        DesiredvCpus: 0
        InstanceTypes:
          - c5.2xlarge
        Subnets:
          - !Ref Subnets
        SecurityGroupIds: 
          - !Ref EC2SecurityGroup
        InstanceRole: !Ref RootInstanceProfile
        Tags: {}
        AllocationStrategy: BEST_FIT_PROGRESSIVE
    DependsOn: RootInstanceProfile
  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Join 
            - '-'
            - - vsr-jobDefinition
              - !Select 
                - 0
                - !Split 
                  - '-'
                  - !Select 
                    - 2
                    - !Split 
                      - /
                      - !Ref AWS::StackId         
      Type: container
      Parameters: {}
      ContainerProperties:
        Command:
          - /bin/sh
          - main.sh
          - !Join [ '://', [ 's3',!Ref inputS3Bucket ] ]
          - input-low-resolution.ts
          - !Join [ '://', [ 's3',!Ref outputS3Bucket ] ]
          - output-high-resolution.ts
        JobRoleArn: !GetAtt ecsTaskExecutionRole.Arn
        Image: !Ref VSRImage
        ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn
        ResourceRequirements:
          - Type: VCPU
            Value: !Ref vcpu  
          - Type: MEMORY
            Value: !Ref Memory
    DependsOn: [inputS3Bucket, outputS3Bucket]  
  BatchJobQueue2:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref BatchVSRComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
      JobQueueName: queue-vsr
    DependsOn: BatchVSRComputeEnvironment
  BatchSchedulingPolicy:
    Type: AWS::Batch::SchedulingPolicy
    Properties:
      Name: VSR-schedulingPolicy
      FairsharePolicy:
        ComputeReservation: 0
        ShareDecaySeconds: 0
Parameters:

  VSRImage:
    Type: String
    Default: public.ecr.aws/u6m7t6l0/vsr-intel:latest
    Description: 'Enter ECS image public/private url'

  VPCName:
    Type: AWS::EC2::VPC::Id
    Description: 'Select an existing vpc'
  Subnets: 
    Type: AWS::EC2::Subnet::Id
    Description: 'Select a subnet within selected VPC a with access to internet'
  Memory: 
    Type: String
    Default: 4000
    AllowedValues:
      - 4000
      - 8000
    Description: 'Enter min required MEMORY for VSR'
  vcpu: 
    Type: String
    Default: 2
    AllowedValues:
      - 2
      - 4
    Description: 'Enter min required vCPU for VSR'

Outputs:
  InputBucket:
    Description: 'Bucket to put low resolution video files (source)'
    Value: !Ref inputS3Bucket

  OutputBucket:
    Description: 'Destination Bucket for super-resolution video files'
    Value: !Ref  outputS3Bucket
